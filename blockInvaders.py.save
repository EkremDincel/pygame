import pygame, os
from pygame.locals import *

def main():
	running = load()
	while running:
		update()
		draw()
		running = check_exit()
	pygame.quit()

def load():
	load_vars()
	return True

def load_vars():
	global screen_size, screen, game_object, folder
	folder = os.path.realpath(__file__)
	screen_size = (300, 300)
	screen = pygame.display.set_mode(screen_size)
	game_object = {
		"player" : [],
		"enemy"  : [],
		"balas"  : [],
		"barrier": [],
		"HUD"    : []
	}

def update():
	pass

def draw():
	camera()
	pass

def camera():
	for name in game_object:
		for gO in game_object[name]:
			screen.blit(gO.img, (gO.x, gO.y))

def check_exit():
	k = pygame.key.get_pressed()
	for e in pygame.event.get():
		if e.type==QUIT or k[K_ESCAPE]:
			return False
	return True

class Sprite():
	def __init__(self, x, y, path, scale=1, width=None, height=None):
		self.x = x
		self.y = y
		self.img = pygame.image.load(folder + path)
		if width != None:
			self.width = width
		else:
			self.width = self.img.get_width()
		if height != None:
			self.height = height
		else:
			self.height = self.img.get_height()
		self.x_speed = 0
		self.y_speed = 0
		self.is_grounded = False

class Collider():
	def check_V_Sides(): #Vertical Sides
		pass
	def check_H_sides(): #Horizontal Sides
		pass

class Camera():
	def __init__(self):
		self.x_offset = 0
		self.y_offset = 0
		self.x = screen_size[0]/2
		self.y = screen_size[1]/2
		self.scale = 1
	def move(x, y):


		self.x_offset += x
		self.y_offset += y
		self.x = 

main()

